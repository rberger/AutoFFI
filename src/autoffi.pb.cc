// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoffi.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "autoffi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace autoffi {
namespace proto {
class RecordFieldDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecordField> {
} _RecordField_default_instance_;
class EnumValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EnumValue> {
} _EnumValue_default_instance_;
class TypeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Type> {
} _Type_default_instance_;
class ValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Value> {
} _Value_default_instance_;
class ExportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Export> {
} _Export_default_instance_;
class CatalogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Catalog> {
} _Catalog_default_instance_;

namespace protobuf_autoffi_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordField, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordField, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecordField, defaultvalue_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumValue, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnumValue, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, kind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, referencedtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, isblockpointer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, elementtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, primitivekind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, recordkind_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, returntype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, paramtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, isconst_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, isvolatile_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Type, underlyingtype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, typeid__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, mangledname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Value, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Export, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Export, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Export, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Export, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Catalog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Catalog, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Catalog, export__),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(RecordField)},
  { 7, -1, sizeof(EnumValue)},
  { 13, -1, sizeof(Type)},
  { 32, -1, sizeof(Value)},
  { 39, -1, sizeof(Export)},
  { 46, -1, sizeof(Catalog)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecordField_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EnumValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Type_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Value_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Export_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Catalog_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "autoffi.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

}  // namespace

void TableStruct::Shutdown() {
  _RecordField_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EnumValue_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Type_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Value_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Export_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Catalog_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RecordField_default_instance_.DefaultConstruct();
  _EnumValue_default_instance_.DefaultConstruct();
  _Type_default_instance_.DefaultConstruct();
  _Value_default_instance_.DefaultConstruct();
  _Export_default_instance_.DefaultConstruct();
  _Catalog_default_instance_.DefaultConstruct();
  _RecordField_default_instance_.get_mutable()->defaultvalue_ = const_cast< ::autoffi::proto::Value*>(
      ::autoffi::proto::Value::internal_default_instance());
  _Export_default_instance_.get_mutable()->value_ = const_cast< ::autoffi::proto::Value*>(
      ::autoffi::proto::Value::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rautoffi.proto\022\rautoffi.proto\"U\n\013Record"
      "Field\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\022*\n\014def"
      "aultValue\030\003 \001(\0132\024.autoffi.proto.Value\"(\n"
      "\tEnumValue\022\014\n\004name\030\001 \001(\t\022\r\n\005value\030\002 \001(\005\""
      "\341\003\n\004Type\022\n\n\002id\030\001 \001(\005\022%\n\004kind\030\002 \001(\0162\027.aut"
      "offi.proto.TypeKind\022\026\n\016referencedType\030\005 "
      "\001(\005\022\026\n\016isBlockPointer\030\006 \001(\010\022\023\n\013elementTy"
      "pe\030\n \001(\005\022\014\n\004size\030\013 \001(\005\0223\n\rprimitiveKind\030"
      "\017 \001(\0162\034.autoffi.proto.PrimitiveKind\0222\n\nr"
      "ecordKind\030\024 \001(\0162\036.autoffi.proto.Type.Rec"
      "ordKind\022)\n\005field\030\025 \003(\0132\032.autoffi.proto.R"
      "ecordField\022\022\n\nreturnType\030\031 \001(\005\022\021\n\tparamT"
      "ype\030\032 \003(\005\022\'\n\005value\030\036 \003(\0132\030.autoffi.proto"
      ".EnumValue\022\017\n\007isConst\0302 \001(\010\022\022\n\nisVolatil"
      "e\0303 \001(\010\022\026\n\016underlyingType\0301 \001(\005\"2\n\nRecor"
      "dKind\022\r\n\tUNDEFINED\020\000\022\n\n\006STRUCT\020\001\022\t\n\005UNIO"
      "N\020\002\";\n\005Value\022\016\n\006typeId\030\001 \001(\005\022\023\n\013mangledN"
      "ame\030\005 \001(\t\022\r\n\005value\030\n \001(\014\"I\n\006Export\022\014\n\004na"
      "me\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\022#\n\005value\030\003 \001(\0132\024."
      "autoffi.proto.Value\"S\n\007Catalog\022!\n\004type\030\001"
      " \003(\0132\023.autoffi.proto.Type\022%\n\006export\030\002 \003("
      "\0132\025.autoffi.proto.Export*\266\002\n\rPrimitiveKi"
      "nd\022\010\n\004Bool\020\000\022\n\n\006Char_U\020\001\022\t\n\005UChar\020\002\022\013\n\007W"
      "Char_U\020\003\022\n\n\006Char16\020\004\022\n\n\006Char32\020\005\022\n\n\006USho"
      "rt\020\006\022\010\n\004UInt\020\007\022\t\n\005ULong\020\010\022\r\n\tULongLong\020\t"
      "\022\013\n\007UInt128\020\n\022\n\n\006Char_S\020\013\022\t\n\005SChar\020\014\022\013\n\007"
      "WChar_S\020\r\022\t\n\005Short\020\016\022\007\n\003Int\020\017\022\010\n\004Long\020\020\022"
      "\014\n\010LongLong\020\021\022\n\n\006Int128\020\022\022\010\n\004Half\020\023\022\t\n\005F"
      "loat\020\024\022\n\n\006Double\020\025\022\016\n\nLongDouble\020\026\022\013\n\007Nu"
      "llPtr\020\027\022\010\n\004Void\020\030*\212\001\n\010TypeKind\022\r\n\tUNDEFI"
      "NED\020\000\022\r\n\tPRIMITIVE\020\001\022\n\n\006RECORD\020\002\022\t\n\005ARRA"
      "Y\020\003\022\013\n\007POINTER\020\004\022\014\n\010FUNCTION\020\005\022\010\n\004ENUM\020\006"
      "\022\r\n\tQUALIFIED\020\007\022\n\n\006STRUCT\020\010\022\t\n\005UNION\020\tB\003"
      "\370\001\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "autoffi.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_autoffi_2eproto

const ::google::protobuf::EnumDescriptor* Type_RecordKind_descriptor() {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_enum_descriptors[0];
}
bool Type_RecordKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Type_RecordKind Type::UNDEFINED;
const Type_RecordKind Type::STRUCT;
const Type_RecordKind Type::UNION;
const Type_RecordKind Type::RecordKind_MIN;
const Type_RecordKind Type::RecordKind_MAX;
const int Type::RecordKind_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PrimitiveKind_descriptor() {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_enum_descriptors[1];
}
bool PrimitiveKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TypeKind_descriptor() {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_enum_descriptors[2];
}
bool TypeKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RecordField::_slow_mutable_defaultvalue() {
  defaultvalue_ = ::google::protobuf::Arena::CreateMessage< ::autoffi::proto::Value >(
      GetArenaNoVirtual());
}
::autoffi::proto::Value* RecordField::_slow_release_defaultvalue() {
  if (defaultvalue_ == NULL) {
    return NULL;
  } else {
    ::autoffi::proto::Value* temp = new ::autoffi::proto::Value(*defaultvalue_);
    defaultvalue_ = NULL;
    return temp;
  }
}
::autoffi::proto::Value* RecordField::unsafe_arena_release_defaultvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.RecordField.defaultValue)
  
  ::autoffi::proto::Value* temp = defaultvalue_;
  defaultvalue_ = NULL;
  return temp;
}
void RecordField::_slow_set_allocated_defaultvalue(
    ::google::protobuf::Arena* message_arena, ::autoffi::proto::Value** defaultvalue) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*defaultvalue) == NULL) {
      message_arena->Own(*defaultvalue);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*defaultvalue)) {
      ::autoffi::proto::Value* new_defaultvalue = 
            ::google::protobuf::Arena::CreateMessage< ::autoffi::proto::Value >(
            message_arena);
      new_defaultvalue->CopyFrom(**defaultvalue);
      *defaultvalue = new_defaultvalue;
    }
}
void RecordField::unsafe_arena_set_allocated_defaultvalue(
    ::autoffi::proto::Value* defaultvalue) {
  if (GetArenaNoVirtual() == NULL) {
    delete defaultvalue_;
  }
  defaultvalue_ = defaultvalue;
  if (defaultvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.RecordField.defaultValue)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecordField::kNameFieldNumber;
const int RecordField::kTypeFieldNumber;
const int RecordField::kDefaultValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecordField::RecordField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_autoffi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autoffi.proto.RecordField)
}
RecordField::RecordField(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_autoffi_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:autoffi.proto.RecordField)
}
RecordField::RecordField(const RecordField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_defaultvalue()) {
    defaultvalue_ = new ::autoffi::proto::Value(*from.defaultvalue_);
  } else {
    defaultvalue_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autoffi.proto.RecordField)
}

void RecordField::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&defaultvalue_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&defaultvalue_) + sizeof(type_));
  _cached_size_ = 0;
}

RecordField::~RecordField() {
  // @@protoc_insertion_point(destructor:autoffi.proto.RecordField)
  SharedDtor();
}

void RecordField::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete defaultvalue_;
  }
}

void RecordField::ArenaDtor(void* object) {
  RecordField* _this = reinterpret_cast< RecordField* >(object);
  (void)_this;
}
void RecordField::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void RecordField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecordField::descriptor() {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[0].descriptor;
}

const RecordField& RecordField::default_instance() {
  protobuf_autoffi_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecordField* RecordField::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<RecordField>(arena);
}

void RecordField::Clear() {
// @@protoc_insertion_point(message_clear_start:autoffi.proto.RecordField)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && defaultvalue_ != NULL) {
    delete defaultvalue_;
  }
  defaultvalue_ = NULL;
  type_ = 0;
}

bool RecordField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autoffi.proto.RecordField)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autoffi.proto.RecordField.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autoffi.proto.Value defaultValue = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_defaultvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autoffi.proto.RecordField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autoffi.proto.RecordField)
  return false;
#undef DO_
}

void RecordField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autoffi.proto.RecordField)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autoffi.proto.RecordField.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // .autoffi.proto.Value defaultValue = 3;
  if (this->has_defaultvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->defaultvalue_, output);
  }

  // @@protoc_insertion_point(serialize_end:autoffi.proto.RecordField)
}

::google::protobuf::uint8* RecordField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autoffi.proto.RecordField)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autoffi.proto.RecordField.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // .autoffi.proto.Value defaultValue = 3;
  if (this->has_defaultvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->defaultvalue_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:autoffi.proto.RecordField)
  return target;
}

size_t RecordField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoffi.proto.RecordField)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .autoffi.proto.Value defaultValue = 3;
  if (this->has_defaultvalue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->defaultvalue_);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecordField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autoffi.proto.RecordField)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecordField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autoffi.proto.RecordField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autoffi.proto.RecordField)
    MergeFrom(*source);
  }
}

void RecordField::MergeFrom(const RecordField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoffi.proto.RecordField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_defaultvalue()) {
    mutable_defaultvalue()->::autoffi::proto::Value::MergeFrom(from.defaultvalue());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RecordField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autoffi.proto.RecordField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordField::CopyFrom(const RecordField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoffi.proto.RecordField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordField::IsInitialized() const {
  return true;
}

void RecordField::Swap(RecordField* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    RecordField* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void RecordField::UnsafeArenaSwap(RecordField* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void RecordField::InternalSwap(RecordField* other) {
  name_.Swap(&other->name_);
  std::swap(defaultvalue_, other->defaultvalue_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecordField::GetMetadata() const {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordField

// string name = 1;
void RecordField::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& RecordField::name() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.RecordField.name)
  return name_.Get();
}
void RecordField::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:autoffi.proto.RecordField.name)
}
void RecordField::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:autoffi.proto.RecordField.name)
}
void RecordField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:autoffi.proto.RecordField.name)
}
::std::string* RecordField::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:autoffi.proto.RecordField.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RecordField::release_name() {
  // @@protoc_insertion_point(field_release:autoffi.proto.RecordField.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* RecordField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.RecordField.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void RecordField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.RecordField.name)
}
void RecordField::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.RecordField.name)
}

// int32 type = 2;
void RecordField::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 RecordField::type() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.RecordField.type)
  return type_;
}
void RecordField::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.RecordField.type)
}

// .autoffi.proto.Value defaultValue = 3;
bool RecordField::has_defaultvalue() const {
  return this != internal_default_instance() && defaultvalue_ != NULL;
}
void RecordField::clear_defaultvalue() {
  if (GetArenaNoVirtual() == NULL && defaultvalue_ != NULL) delete defaultvalue_;
  defaultvalue_ = NULL;
}
const ::autoffi::proto::Value& RecordField::defaultvalue() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.RecordField.defaultValue)
  return defaultvalue_ != NULL ? *defaultvalue_
                         : *::autoffi::proto::Value::internal_default_instance();
}
::autoffi::proto::Value* RecordField::mutable_defaultvalue() {
  
  if (defaultvalue_ == NULL) {
    _slow_mutable_defaultvalue();
  }
  // @@protoc_insertion_point(field_mutable:autoffi.proto.RecordField.defaultValue)
  return defaultvalue_;
}
::autoffi::proto::Value* RecordField::release_defaultvalue() {
  // @@protoc_insertion_point(field_release:autoffi.proto.RecordField.defaultValue)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_defaultvalue();
  } else {
    ::autoffi::proto::Value* temp = defaultvalue_;
    defaultvalue_ = NULL;
    return temp;
  }
}
 void RecordField::set_allocated_defaultvalue(::autoffi::proto::Value* defaultvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete defaultvalue_;
  }
  if (defaultvalue != NULL) {
    _slow_set_allocated_defaultvalue(message_arena, &defaultvalue);
  }
  defaultvalue_ = defaultvalue;
  if (defaultvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.RecordField.defaultValue)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnumValue::kNameFieldNumber;
const int EnumValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnumValue::EnumValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_autoffi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autoffi.proto.EnumValue)
}
EnumValue::EnumValue(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_autoffi_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:autoffi.proto.EnumValue)
}
EnumValue::EnumValue(const EnumValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:autoffi.proto.EnumValue)
}

void EnumValue::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = 0;
  _cached_size_ = 0;
}

EnumValue::~EnumValue() {
  // @@protoc_insertion_point(destructor:autoffi.proto.EnumValue)
  SharedDtor();
}

void EnumValue::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void EnumValue::ArenaDtor(void* object) {
  EnumValue* _this = reinterpret_cast< EnumValue* >(object);
  (void)_this;
}
void EnumValue::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void EnumValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnumValue::descriptor() {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[1].descriptor;
}

const EnumValue& EnumValue::default_instance() {
  protobuf_autoffi_2eproto::InitDefaults();
  return *internal_default_instance();
}

EnumValue* EnumValue::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<EnumValue>(arena);
}

void EnumValue::Clear() {
// @@protoc_insertion_point(message_clear_start:autoffi.proto.EnumValue)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  value_ = 0;
}

bool EnumValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autoffi.proto.EnumValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autoffi.proto.EnumValue.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 value = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autoffi.proto.EnumValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autoffi.proto.EnumValue)
  return false;
#undef DO_
}

void EnumValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autoffi.proto.EnumValue)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autoffi.proto.EnumValue.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:autoffi.proto.EnumValue)
}

::google::protobuf::uint8* EnumValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autoffi.proto.EnumValue)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autoffi.proto.EnumValue.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:autoffi.proto.EnumValue)
  return target;
}

size_t EnumValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoffi.proto.EnumValue)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int32 value = 2;
  if (this->value() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnumValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autoffi.proto.EnumValue)
  GOOGLE_DCHECK_NE(&from, this);
  const EnumValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EnumValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autoffi.proto.EnumValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autoffi.proto.EnumValue)
    MergeFrom(*source);
  }
}

void EnumValue::MergeFrom(const EnumValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoffi.proto.EnumValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void EnumValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autoffi.proto.EnumValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnumValue::CopyFrom(const EnumValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoffi.proto.EnumValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnumValue::IsInitialized() const {
  return true;
}

void EnumValue::Swap(EnumValue* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    EnumValue* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void EnumValue::UnsafeArenaSwap(EnumValue* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void EnumValue::InternalSwap(EnumValue* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnumValue::GetMetadata() const {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnumValue

// string name = 1;
void EnumValue::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& EnumValue::name() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.EnumValue.name)
  return name_.Get();
}
void EnumValue::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:autoffi.proto.EnumValue.name)
}
void EnumValue::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:autoffi.proto.EnumValue.name)
}
void EnumValue::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:autoffi.proto.EnumValue.name)
}
::std::string* EnumValue::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:autoffi.proto.EnumValue.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* EnumValue::release_name() {
  // @@protoc_insertion_point(field_release:autoffi.proto.EnumValue.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* EnumValue::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.EnumValue.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void EnumValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.EnumValue.name)
}
void EnumValue::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.EnumValue.name)
}

// int32 value = 2;
void EnumValue::clear_value() {
  value_ = 0;
}
::google::protobuf::int32 EnumValue::value() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.EnumValue.value)
  return value_;
}
void EnumValue::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.EnumValue.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Type::kIdFieldNumber;
const int Type::kKindFieldNumber;
const int Type::kReferencedTypeFieldNumber;
const int Type::kIsBlockPointerFieldNumber;
const int Type::kElementTypeFieldNumber;
const int Type::kSizeFieldNumber;
const int Type::kPrimitiveKindFieldNumber;
const int Type::kRecordKindFieldNumber;
const int Type::kFieldFieldNumber;
const int Type::kReturnTypeFieldNumber;
const int Type::kParamTypeFieldNumber;
const int Type::kValueFieldNumber;
const int Type::kIsConstFieldNumber;
const int Type::kIsVolatileFieldNumber;
const int Type::kUnderlyingTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Type::Type()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_autoffi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autoffi.proto.Type)
}
Type::Type(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  field_(arena),
  paramtype_(arena),
  value_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_autoffi_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:autoffi.proto.Type)
}
Type::Type(const Type& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      field_(from.field_),
      paramtype_(from.paramtype_),
      value_(from.value_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&underlyingtype_) -
    reinterpret_cast<char*>(&id_) + sizeof(underlyingtype_));
  // @@protoc_insertion_point(copy_constructor:autoffi.proto.Type)
}

void Type::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&underlyingtype_) -
    reinterpret_cast<char*>(&id_) + sizeof(underlyingtype_));
  _cached_size_ = 0;
}

Type::~Type() {
  // @@protoc_insertion_point(destructor:autoffi.proto.Type)
  SharedDtor();
}

void Type::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Type::ArenaDtor(void* object) {
  Type* _this = reinterpret_cast< Type* >(object);
  (void)_this;
}
void Type::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Type::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Type::descriptor() {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[2].descriptor;
}

const Type& Type::default_instance() {
  protobuf_autoffi_2eproto::InitDefaults();
  return *internal_default_instance();
}

Type* Type::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Type>(arena);
}

void Type::Clear() {
// @@protoc_insertion_point(message_clear_start:autoffi.proto.Type)
  field_.Clear();
  paramtype_.Clear();
  value_.Clear();
  ::memset(&id_, 0, reinterpret_cast<char*>(&underlyingtype_) -
    reinterpret_cast<char*>(&id_) + sizeof(underlyingtype_));
}

bool Type::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autoffi.proto.Type)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autoffi.proto.TypeKind kind = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_kind(static_cast< ::autoffi::proto::TypeKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 referencedType = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &referencedtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isBlockPointer = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblockpointer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 elementType = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elementtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 11;
      case 11: {
        if (tag == 88u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autoffi.proto.PrimitiveKind primitiveKind = 15;
      case 15: {
        if (tag == 120u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_primitivekind(static_cast< ::autoffi::proto::PrimitiveKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autoffi.proto.Type.RecordKind recordKind = 20;
      case 20: {
        if (tag == 160u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_recordkind(static_cast< ::autoffi::proto::Type_RecordKind >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autoffi.proto.RecordField field = 21;
      case 21: {
        if (tag == 170u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_field()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int32 returnType = 25;
      case 25: {
        if (tag == 200u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returntype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 paramType = 26;
      case 26: {
        if (tag == 210u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_paramtype())));
        } else if (tag == 208u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 210u, input, this->mutable_paramtype())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .autoffi.proto.EnumValue value = 30;
      case 30: {
        if (tag == 242u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int32 underlyingType = 49;
      case 49: {
        if (tag == 392u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &underlyingtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isConst = 50;
      case 50: {
        if (tag == 400u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconst_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isVolatile = 51;
      case 51: {
        if (tag == 408u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvolatile_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autoffi.proto.Type)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autoffi.proto.Type)
  return false;
#undef DO_
}

void Type::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autoffi.proto.Type)
  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .autoffi.proto.TypeKind kind = 2;
  if (this->kind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->kind(), output);
  }

  // int32 referencedType = 5;
  if (this->referencedtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->referencedtype(), output);
  }

  // bool isBlockPointer = 6;
  if (this->isblockpointer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isblockpointer(), output);
  }

  // int32 elementType = 10;
  if (this->elementtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->elementtype(), output);
  }

  // int32 size = 11;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->size(), output);
  }

  // .autoffi.proto.PrimitiveKind primitiveKind = 15;
  if (this->primitivekind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->primitivekind(), output);
  }

  // .autoffi.proto.Type.RecordKind recordKind = 20;
  if (this->recordkind() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      20, this->recordkind(), output);
  }

  // repeated .autoffi.proto.RecordField field = 21;
  for (unsigned int i = 0, n = this->field_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->field(i), output);
  }

  // int32 returnType = 25;
  if (this->returntype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->returntype(), output);
  }

  // repeated int32 paramType = 26;
  if (this->paramtype_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(26, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_paramtype_cached_byte_size_);
  }
  for (int i = 0; i < this->paramtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->paramtype(i), output);
  }

  // repeated .autoffi.proto.EnumValue value = 30;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->value(i), output);
  }

  // int32 underlyingType = 49;
  if (this->underlyingtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->underlyingtype(), output);
  }

  // bool isConst = 50;
  if (this->isconst() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(50, this->isconst(), output);
  }

  // bool isVolatile = 51;
  if (this->isvolatile() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->isvolatile(), output);
  }

  // @@protoc_insertion_point(serialize_end:autoffi.proto.Type)
}

::google::protobuf::uint8* Type::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autoffi.proto.Type)
  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .autoffi.proto.TypeKind kind = 2;
  if (this->kind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->kind(), target);
  }

  // int32 referencedType = 5;
  if (this->referencedtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->referencedtype(), target);
  }

  // bool isBlockPointer = 6;
  if (this->isblockpointer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isblockpointer(), target);
  }

  // int32 elementType = 10;
  if (this->elementtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->elementtype(), target);
  }

  // int32 size = 11;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->size(), target);
  }

  // .autoffi.proto.PrimitiveKind primitiveKind = 15;
  if (this->primitivekind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      15, this->primitivekind(), target);
  }

  // .autoffi.proto.Type.RecordKind recordKind = 20;
  if (this->recordkind() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      20, this->recordkind(), target);
  }

  // repeated .autoffi.proto.RecordField field = 21;
  for (unsigned int i = 0, n = this->field_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, this->field(i), false, target);
  }

  // int32 returnType = 25;
  if (this->returntype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->returntype(), target);
  }

  // repeated int32 paramType = 26;
  if (this->paramtype_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      26,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _paramtype_cached_byte_size_, target);
  }
  for (int i = 0; i < this->paramtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->paramtype(i), target);
  }

  // repeated .autoffi.proto.EnumValue value = 30;
  for (unsigned int i = 0, n = this->value_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, this->value(i), false, target);
  }

  // int32 underlyingType = 49;
  if (this->underlyingtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->underlyingtype(), target);
  }

  // bool isConst = 50;
  if (this->isconst() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(50, this->isconst(), target);
  }

  // bool isVolatile = 51;
  if (this->isvolatile() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(51, this->isvolatile(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:autoffi.proto.Type)
  return target;
}

size_t Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoffi.proto.Type)
  size_t total_size = 0;

  // repeated .autoffi.proto.RecordField field = 21;
  {
    unsigned int count = this->field_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->field(i));
    }
  }

  // repeated int32 paramType = 26;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->paramtype_);
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _paramtype_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .autoffi.proto.EnumValue value = 30;
  {
    unsigned int count = this->value_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value(i));
    }
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .autoffi.proto.TypeKind kind = 2;
  if (this->kind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->kind());
  }

  // int32 referencedType = 5;
  if (this->referencedtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->referencedtype());
  }

  // int32 elementType = 10;
  if (this->elementtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->elementtype());
  }

  // int32 size = 11;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  // .autoffi.proto.PrimitiveKind primitiveKind = 15;
  if (this->primitivekind() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->primitivekind());
  }

  // .autoffi.proto.Type.RecordKind recordKind = 20;
  if (this->recordkind() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->recordkind());
  }

  // int32 returnType = 25;
  if (this->returntype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->returntype());
  }

  // bool isBlockPointer = 6;
  if (this->isblockpointer() != 0) {
    total_size += 1 + 1;
  }

  // bool isConst = 50;
  if (this->isconst() != 0) {
    total_size += 2 + 1;
  }

  // bool isVolatile = 51;
  if (this->isvolatile() != 0) {
    total_size += 2 + 1;
  }

  // int32 underlyingType = 49;
  if (this->underlyingtype() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->underlyingtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Type::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autoffi.proto.Type)
  GOOGLE_DCHECK_NE(&from, this);
  const Type* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Type>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autoffi.proto.Type)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autoffi.proto.Type)
    MergeFrom(*source);
  }
}

void Type::MergeFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoffi.proto.Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_.MergeFrom(from.field_);
  paramtype_.MergeFrom(from.paramtype_);
  value_.MergeFrom(from.value_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.kind() != 0) {
    set_kind(from.kind());
  }
  if (from.referencedtype() != 0) {
    set_referencedtype(from.referencedtype());
  }
  if (from.elementtype() != 0) {
    set_elementtype(from.elementtype());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.primitivekind() != 0) {
    set_primitivekind(from.primitivekind());
  }
  if (from.recordkind() != 0) {
    set_recordkind(from.recordkind());
  }
  if (from.returntype() != 0) {
    set_returntype(from.returntype());
  }
  if (from.isblockpointer() != 0) {
    set_isblockpointer(from.isblockpointer());
  }
  if (from.isconst() != 0) {
    set_isconst(from.isconst());
  }
  if (from.isvolatile() != 0) {
    set_isvolatile(from.isvolatile());
  }
  if (from.underlyingtype() != 0) {
    set_underlyingtype(from.underlyingtype());
  }
}

void Type::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autoffi.proto.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type::CopyFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoffi.proto.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {
  return true;
}

void Type::Swap(Type* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Type* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Type::UnsafeArenaSwap(Type* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Type::InternalSwap(Type* other) {
  field_.UnsafeArenaSwap(&other->field_);
  paramtype_.UnsafeArenaSwap(&other->paramtype_);
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(id_, other->id_);
  std::swap(kind_, other->kind_);
  std::swap(referencedtype_, other->referencedtype_);
  std::swap(elementtype_, other->elementtype_);
  std::swap(size_, other->size_);
  std::swap(primitivekind_, other->primitivekind_);
  std::swap(recordkind_, other->recordkind_);
  std::swap(returntype_, other->returntype_);
  std::swap(isblockpointer_, other->isblockpointer_);
  std::swap(isconst_, other->isconst_);
  std::swap(isvolatile_, other->isvolatile_);
  std::swap(underlyingtype_, other->underlyingtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Type::GetMetadata() const {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Type

// int32 id = 1;
void Type::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 Type::id() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.id)
  return id_;
}
void Type::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.id)
}

// .autoffi.proto.TypeKind kind = 2;
void Type::clear_kind() {
  kind_ = 0;
}
::autoffi::proto::TypeKind Type::kind() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.kind)
  return static_cast< ::autoffi::proto::TypeKind >(kind_);
}
void Type::set_kind(::autoffi::proto::TypeKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.kind)
}

// int32 referencedType = 5;
void Type::clear_referencedtype() {
  referencedtype_ = 0;
}
::google::protobuf::int32 Type::referencedtype() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.referencedType)
  return referencedtype_;
}
void Type::set_referencedtype(::google::protobuf::int32 value) {
  
  referencedtype_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.referencedType)
}

// bool isBlockPointer = 6;
void Type::clear_isblockpointer() {
  isblockpointer_ = false;
}
bool Type::isblockpointer() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.isBlockPointer)
  return isblockpointer_;
}
void Type::set_isblockpointer(bool value) {
  
  isblockpointer_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.isBlockPointer)
}

// int32 elementType = 10;
void Type::clear_elementtype() {
  elementtype_ = 0;
}
::google::protobuf::int32 Type::elementtype() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.elementType)
  return elementtype_;
}
void Type::set_elementtype(::google::protobuf::int32 value) {
  
  elementtype_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.elementType)
}

// int32 size = 11;
void Type::clear_size() {
  size_ = 0;
}
::google::protobuf::int32 Type::size() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.size)
  return size_;
}
void Type::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.size)
}

// .autoffi.proto.PrimitiveKind primitiveKind = 15;
void Type::clear_primitivekind() {
  primitivekind_ = 0;
}
::autoffi::proto::PrimitiveKind Type::primitivekind() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.primitiveKind)
  return static_cast< ::autoffi::proto::PrimitiveKind >(primitivekind_);
}
void Type::set_primitivekind(::autoffi::proto::PrimitiveKind value) {
  
  primitivekind_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.primitiveKind)
}

// .autoffi.proto.Type.RecordKind recordKind = 20;
void Type::clear_recordkind() {
  recordkind_ = 0;
}
::autoffi::proto::Type_RecordKind Type::recordkind() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.recordKind)
  return static_cast< ::autoffi::proto::Type_RecordKind >(recordkind_);
}
void Type::set_recordkind(::autoffi::proto::Type_RecordKind value) {
  
  recordkind_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.recordKind)
}

// repeated .autoffi.proto.RecordField field = 21;
int Type::field_size() const {
  return field_.size();
}
void Type::clear_field() {
  field_.Clear();
}
const ::autoffi::proto::RecordField& Type::field(int index) const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.field)
  return field_.Get(index);
}
::autoffi::proto::RecordField* Type::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Type.field)
  return field_.Mutable(index);
}
::autoffi::proto::RecordField* Type::add_field() {
  // @@protoc_insertion_point(field_add:autoffi.proto.Type.field)
  return field_.Add();
}
::google::protobuf::RepeatedPtrField< ::autoffi::proto::RecordField >*
Type::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:autoffi.proto.Type.field)
  return &field_;
}
const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::RecordField >&
Type::field() const {
  // @@protoc_insertion_point(field_list:autoffi.proto.Type.field)
  return field_;
}

// int32 returnType = 25;
void Type::clear_returntype() {
  returntype_ = 0;
}
::google::protobuf::int32 Type::returntype() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.returnType)
  return returntype_;
}
void Type::set_returntype(::google::protobuf::int32 value) {
  
  returntype_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.returnType)
}

// repeated int32 paramType = 26;
int Type::paramtype_size() const {
  return paramtype_.size();
}
void Type::clear_paramtype() {
  paramtype_.Clear();
}
::google::protobuf::int32 Type::paramtype(int index) const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.paramType)
  return paramtype_.Get(index);
}
void Type::set_paramtype(int index, ::google::protobuf::int32 value) {
  paramtype_.Set(index, value);
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.paramType)
}
void Type::add_paramtype(::google::protobuf::int32 value) {
  paramtype_.Add(value);
  // @@protoc_insertion_point(field_add:autoffi.proto.Type.paramType)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Type::paramtype() const {
  // @@protoc_insertion_point(field_list:autoffi.proto.Type.paramType)
  return paramtype_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Type::mutable_paramtype() {
  // @@protoc_insertion_point(field_mutable_list:autoffi.proto.Type.paramType)
  return &paramtype_;
}

// repeated .autoffi.proto.EnumValue value = 30;
int Type::value_size() const {
  return value_.size();
}
void Type::clear_value() {
  value_.Clear();
}
const ::autoffi::proto::EnumValue& Type::value(int index) const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.value)
  return value_.Get(index);
}
::autoffi::proto::EnumValue* Type::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Type.value)
  return value_.Mutable(index);
}
::autoffi::proto::EnumValue* Type::add_value() {
  // @@protoc_insertion_point(field_add:autoffi.proto.Type.value)
  return value_.Add();
}
::google::protobuf::RepeatedPtrField< ::autoffi::proto::EnumValue >*
Type::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:autoffi.proto.Type.value)
  return &value_;
}
const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::EnumValue >&
Type::value() const {
  // @@protoc_insertion_point(field_list:autoffi.proto.Type.value)
  return value_;
}

// bool isConst = 50;
void Type::clear_isconst() {
  isconst_ = false;
}
bool Type::isconst() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.isConst)
  return isconst_;
}
void Type::set_isconst(bool value) {
  
  isconst_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.isConst)
}

// bool isVolatile = 51;
void Type::clear_isvolatile() {
  isvolatile_ = false;
}
bool Type::isvolatile() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.isVolatile)
  return isvolatile_;
}
void Type::set_isvolatile(bool value) {
  
  isvolatile_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.isVolatile)
}

// int32 underlyingType = 49;
void Type::clear_underlyingtype() {
  underlyingtype_ = 0;
}
::google::protobuf::int32 Type::underlyingtype() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.underlyingType)
  return underlyingtype_;
}
void Type::set_underlyingtype(::google::protobuf::int32 value) {
  
  underlyingtype_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.underlyingType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Value::kTypeIdFieldNumber;
const int Value::kMangledNameFieldNumber;
const int Value::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Value::Value()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_autoffi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autoffi.proto.Value)
}
Value::Value(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_autoffi_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:autoffi.proto.Value)
}
Value::Value(const Value& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mangledname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mangledname().size() > 0) {
    mangledname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mangledname(),
      GetArenaNoVirtual());
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value(),
      GetArenaNoVirtual());
  }
  typeid__ = from.typeid__;
  // @@protoc_insertion_point(copy_constructor:autoffi.proto.Value)
}

void Value::SharedCtor() {
  mangledname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  typeid__ = 0;
  _cached_size_ = 0;
}

Value::~Value() {
  // @@protoc_insertion_point(destructor:autoffi.proto.Value)
  SharedDtor();
}

void Value::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  mangledname_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  value_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
}

void Value::ArenaDtor(void* object) {
  Value* _this = reinterpret_cast< Value* >(object);
  (void)_this;
}
void Value::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Value::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Value::descriptor() {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[3].descriptor;
}

const Value& Value::default_instance() {
  protobuf_autoffi_2eproto::InitDefaults();
  return *internal_default_instance();
}

Value* Value::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Value>(arena);
}

void Value::Clear() {
// @@protoc_insertion_point(message_clear_start:autoffi.proto.Value)
  mangledname_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  typeid__ = 0;
}

bool Value::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autoffi.proto.Value)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 typeId = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &typeid__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mangledName = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mangledname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mangledname().data(), this->mangledname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autoffi.proto.Value.mangledName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes value = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autoffi.proto.Value)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autoffi.proto.Value)
  return false;
#undef DO_
}

void Value::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autoffi.proto.Value)
  // int32 typeId = 1;
  if (this->typeid_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->typeid_(), output);
  }

  // string mangledName = 5;
  if (this->mangledname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mangledname().data(), this->mangledname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autoffi.proto.Value.mangledName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mangledname(), output);
  }

  // bytes value = 10;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:autoffi.proto.Value)
}

::google::protobuf::uint8* Value::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autoffi.proto.Value)
  // int32 typeId = 1;
  if (this->typeid_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->typeid_(), target);
  }

  // string mangledName = 5;
  if (this->mangledname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mangledname().data(), this->mangledname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autoffi.proto.Value.mangledName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->mangledname(), target);
  }

  // bytes value = 10;
  if (this->value().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:autoffi.proto.Value)
  return target;
}

size_t Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoffi.proto.Value)
  size_t total_size = 0;

  // string mangledName = 5;
  if (this->mangledname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mangledname());
  }

  // bytes value = 10;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  // int32 typeId = 1;
  if (this->typeid_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->typeid_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Value::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autoffi.proto.Value)
  GOOGLE_DCHECK_NE(&from, this);
  const Value* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Value>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autoffi.proto.Value)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autoffi.proto.Value)
    MergeFrom(*source);
  }
}

void Value::MergeFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoffi.proto.Value)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.mangledname().size() > 0) {
    set_mangledname(from.mangledname());
  }
  if (from.value().size() > 0) {
    set_value(from.value());
  }
  if (from.typeid_() != 0) {
    set_typeid_(from.typeid_());
  }
}

void Value::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autoffi.proto.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Value::CopyFrom(const Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoffi.proto.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Value::IsInitialized() const {
  return true;
}

void Value::Swap(Value* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Value* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Value::UnsafeArenaSwap(Value* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Value::InternalSwap(Value* other) {
  mangledname_.Swap(&other->mangledname_);
  value_.Swap(&other->value_);
  std::swap(typeid__, other->typeid__);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Value::GetMetadata() const {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Value

// int32 typeId = 1;
void Value::clear_typeid_() {
  typeid__ = 0;
}
::google::protobuf::int32 Value::typeid_() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Value.typeId)
  return typeid__;
}
void Value::set_typeid_(::google::protobuf::int32 value) {
  
  typeid__ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Value.typeId)
}

// string mangledName = 5;
void Value::clear_mangledname() {
  mangledname_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Value::mangledname() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Value.mangledName)
  return mangledname_.Get();
}
void Value::set_mangledname(const ::std::string& value) {
  
  mangledname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:autoffi.proto.Value.mangledName)
}
void Value::set_mangledname(const char* value) {
  
  mangledname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:autoffi.proto.Value.mangledName)
}
void Value::set_mangledname(const char* value,
    size_t size) {
  
  mangledname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:autoffi.proto.Value.mangledName)
}
::std::string* Value::mutable_mangledname() {
  
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Value.mangledName)
  return mangledname_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Value::release_mangledname() {
  // @@protoc_insertion_point(field_release:autoffi.proto.Value.mangledName)
  
  return mangledname_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Value::unsafe_arena_release_mangledname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.Value.mangledName)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return mangledname_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Value::set_allocated_mangledname(::std::string* mangledname) {
  if (mangledname != NULL) {
    
  } else {
    
  }
  mangledname_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mangledname,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.Value.mangledName)
}
void Value::unsafe_arena_set_allocated_mangledname(
    ::std::string* mangledname) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (mangledname != NULL) {
    
  } else {
    
  }
  mangledname_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      mangledname, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.Value.mangledName)
}

// bytes value = 10;
void Value::clear_value() {
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Value::value() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Value.value)
  return value_.Get();
}
void Value::set_value(const ::std::string& value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:autoffi.proto.Value.value)
}
void Value::set_value(const char* value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:autoffi.proto.Value.value)
}
void Value::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:autoffi.proto.Value.value)
}
::std::string* Value::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Value.value)
  return value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Value::release_value() {
  // @@protoc_insertion_point(field_release:autoffi.proto.Value.value)
  
  return value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Value::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.Value.value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Value::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.Value.value)
}
void Value::unsafe_arena_set_allocated_value(
    ::std::string* value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (value != NULL) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.Value.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

void Export::_slow_mutable_value() {
  value_ = ::google::protobuf::Arena::CreateMessage< ::autoffi::proto::Value >(
      GetArenaNoVirtual());
}
::autoffi::proto::Value* Export::_slow_release_value() {
  if (value_ == NULL) {
    return NULL;
  } else {
    ::autoffi::proto::Value* temp = new ::autoffi::proto::Value(*value_);
    value_ = NULL;
    return temp;
  }
}
::autoffi::proto::Value* Export::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.Export.value)
  
  ::autoffi::proto::Value* temp = value_;
  value_ = NULL;
  return temp;
}
void Export::_slow_set_allocated_value(
    ::google::protobuf::Arena* message_arena, ::autoffi::proto::Value** value) {
    if (message_arena != NULL && 
        ::google::protobuf::Arena::GetArena(*value) == NULL) {
      message_arena->Own(*value);
    } else if (message_arena !=
               ::google::protobuf::Arena::GetArena(*value)) {
      ::autoffi::proto::Value* new_value = 
            ::google::protobuf::Arena::CreateMessage< ::autoffi::proto::Value >(
            message_arena);
      new_value->CopyFrom(**value);
      *value = new_value;
    }
}
void Export::unsafe_arena_set_allocated_value(
    ::autoffi::proto::Value* value) {
  if (GetArenaNoVirtual() == NULL) {
    delete value_;
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.Export.value)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Export::kNameFieldNumber;
const int Export::kTypeFieldNumber;
const int Export::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Export::Export()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_autoffi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autoffi.proto.Export)
}
Export::Export(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_autoffi_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:autoffi.proto.Export)
}
Export::Export(const Export& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_value()) {
    value_ = new ::autoffi::proto::Value(*from.value_);
  } else {
    value_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:autoffi.proto.Export)
}

void Export::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&value_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&value_) + sizeof(type_));
  _cached_size_ = 0;
}

Export::~Export() {
  // @@protoc_insertion_point(destructor:autoffi.proto.Export)
  SharedDtor();
}

void Export::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

  name_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arena);
  if (this != internal_default_instance()) {
    delete value_;
  }
}

void Export::ArenaDtor(void* object) {
  Export* _this = reinterpret_cast< Export* >(object);
  (void)_this;
}
void Export::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Export::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Export::descriptor() {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[4].descriptor;
}

const Export& Export::default_instance() {
  protobuf_autoffi_2eproto::InitDefaults();
  return *internal_default_instance();
}

Export* Export::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Export>(arena);
}

void Export::Clear() {
// @@protoc_insertion_point(message_clear_start:autoffi.proto.Export)
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && value_ != NULL) {
    delete value_;
  }
  value_ = NULL;
  type_ = 0;
}

bool Export::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autoffi.proto.Export)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "autoffi.proto.Export.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .autoffi.proto.Value value = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autoffi.proto.Export)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autoffi.proto.Export)
  return false;
#undef DO_
}

void Export::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autoffi.proto.Export)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autoffi.proto.Export.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // .autoffi.proto.Value value = 3;
  if (this->has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->value_, output);
  }

  // @@protoc_insertion_point(serialize_end:autoffi.proto.Export)
}

::google::protobuf::uint8* Export::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autoffi.proto.Export)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "autoffi.proto.Export.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // .autoffi.proto.Value value = 3;
  if (this->has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->value_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:autoffi.proto.Export)
  return target;
}

size_t Export::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoffi.proto.Export)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .autoffi.proto.Value value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->value_);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Export::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autoffi.proto.Export)
  GOOGLE_DCHECK_NE(&from, this);
  const Export* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Export>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autoffi.proto.Export)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autoffi.proto.Export)
    MergeFrom(*source);
  }
}

void Export::MergeFrom(const Export& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoffi.proto.Export)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_value()) {
    mutable_value()->::autoffi::proto::Value::MergeFrom(from.value());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void Export::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autoffi.proto.Export)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Export::CopyFrom(const Export& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoffi.proto.Export)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Export::IsInitialized() const {
  return true;
}

void Export::Swap(Export* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Export* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Export::UnsafeArenaSwap(Export* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Export::InternalSwap(Export* other) {
  name_.Swap(&other->name_);
  std::swap(value_, other->value_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Export::GetMetadata() const {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Export

// string name = 1;
void Export::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
const ::std::string& Export::name() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Export.name)
  return name_.Get();
}
void Export::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:autoffi.proto.Export.name)
}
void Export::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:autoffi.proto.Export.name)
}
void Export::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:autoffi.proto.Export.name)
}
::std::string* Export::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Export.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Export::release_name() {
  // @@protoc_insertion_point(field_release:autoffi.proto.Export.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
::std::string* Export::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.Export.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
void Export::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.Export.name)
}
void Export::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.Export.name)
}

// int32 type = 2;
void Export::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 Export::type() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Export.type)
  return type_;
}
void Export::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Export.type)
}

// .autoffi.proto.Value value = 3;
bool Export::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
void Export::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
const ::autoffi::proto::Value& Export::value() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Export.value)
  return value_ != NULL ? *value_
                         : *::autoffi::proto::Value::internal_default_instance();
}
::autoffi::proto::Value* Export::mutable_value() {
  
  if (value_ == NULL) {
    _slow_mutable_value();
  }
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Export.value)
  return value_;
}
::autoffi::proto::Value* Export::release_value() {
  // @@protoc_insertion_point(field_release:autoffi.proto.Export.value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_value();
  } else {
    ::autoffi::proto::Value* temp = value_;
    value_ = NULL;
    return temp;
  }
}
 void Export::set_allocated_value(::autoffi::proto::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value != NULL) {
    _slow_set_allocated_value(message_arena, &value);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.Export.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Catalog::kTypeFieldNumber;
const int Catalog::kExportFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Catalog::Catalog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_autoffi_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:autoffi.proto.Catalog)
}
Catalog::Catalog(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  type_(arena),
  export__(arena) {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_autoffi_2eproto::InitDefaults();
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:autoffi.proto.Catalog)
}
Catalog::Catalog(const Catalog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      type_(from.type_),
      export__(from.export__),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:autoffi.proto.Catalog)
}

void Catalog::SharedCtor() {
  _cached_size_ = 0;
}

Catalog::~Catalog() {
  // @@protoc_insertion_point(destructor:autoffi.proto.Catalog)
  SharedDtor();
}

void Catalog::SharedDtor() {
  ::google::protobuf::Arena* arena = GetArenaNoVirtual();
  if (arena != NULL) {
    return;
  }

}

void Catalog::ArenaDtor(void* object) {
  Catalog* _this = reinterpret_cast< Catalog* >(object);
  (void)_this;
}
void Catalog::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Catalog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Catalog::descriptor() {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[5].descriptor;
}

const Catalog& Catalog::default_instance() {
  protobuf_autoffi_2eproto::InitDefaults();
  return *internal_default_instance();
}

Catalog* Catalog::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Catalog>(arena);
}

void Catalog::Clear() {
// @@protoc_insertion_point(message_clear_start:autoffi.proto.Catalog)
  type_.Clear();
  export__.Clear();
}

bool Catalog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:autoffi.proto.Catalog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .autoffi.proto.Type type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_type()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .autoffi.proto.Export export = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_export_()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:autoffi.proto.Catalog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:autoffi.proto.Catalog)
  return false;
#undef DO_
}

void Catalog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:autoffi.proto.Catalog)
  // repeated .autoffi.proto.Type type = 1;
  for (unsigned int i = 0, n = this->type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->type(i), output);
  }

  // repeated .autoffi.proto.Export export = 2;
  for (unsigned int i = 0, n = this->export__size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->export_(i), output);
  }

  // @@protoc_insertion_point(serialize_end:autoffi.proto.Catalog)
}

::google::protobuf::uint8* Catalog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:autoffi.proto.Catalog)
  // repeated .autoffi.proto.Type type = 1;
  for (unsigned int i = 0, n = this->type_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->type(i), false, target);
  }

  // repeated .autoffi.proto.Export export = 2;
  for (unsigned int i = 0, n = this->export__size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->export_(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:autoffi.proto.Catalog)
  return target;
}

size_t Catalog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:autoffi.proto.Catalog)
  size_t total_size = 0;

  // repeated .autoffi.proto.Type type = 1;
  {
    unsigned int count = this->type_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->type(i));
    }
  }

  // repeated .autoffi.proto.Export export = 2;
  {
    unsigned int count = this->export__size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->export_(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Catalog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:autoffi.proto.Catalog)
  GOOGLE_DCHECK_NE(&from, this);
  const Catalog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Catalog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:autoffi.proto.Catalog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:autoffi.proto.Catalog)
    MergeFrom(*source);
  }
}

void Catalog::MergeFrom(const Catalog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:autoffi.proto.Catalog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.MergeFrom(from.type_);
  export__.MergeFrom(from.export__);
}

void Catalog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:autoffi.proto.Catalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Catalog::CopyFrom(const Catalog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:autoffi.proto.Catalog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Catalog::IsInitialized() const {
  return true;
}

void Catalog::Swap(Catalog* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Catalog* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Catalog::UnsafeArenaSwap(Catalog* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Catalog::InternalSwap(Catalog* other) {
  type_.UnsafeArenaSwap(&other->type_);
  export__.UnsafeArenaSwap(&other->export__);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Catalog::GetMetadata() const {
  protobuf_autoffi_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_autoffi_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Catalog

// repeated .autoffi.proto.Type type = 1;
int Catalog::type_size() const {
  return type_.size();
}
void Catalog::clear_type() {
  type_.Clear();
}
const ::autoffi::proto::Type& Catalog::type(int index) const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Catalog.type)
  return type_.Get(index);
}
::autoffi::proto::Type* Catalog::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Catalog.type)
  return type_.Mutable(index);
}
::autoffi::proto::Type* Catalog::add_type() {
  // @@protoc_insertion_point(field_add:autoffi.proto.Catalog.type)
  return type_.Add();
}
::google::protobuf::RepeatedPtrField< ::autoffi::proto::Type >*
Catalog::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:autoffi.proto.Catalog.type)
  return &type_;
}
const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Type >&
Catalog::type() const {
  // @@protoc_insertion_point(field_list:autoffi.proto.Catalog.type)
  return type_;
}

// repeated .autoffi.proto.Export export = 2;
int Catalog::export__size() const {
  return export__.size();
}
void Catalog::clear_export_() {
  export__.Clear();
}
const ::autoffi::proto::Export& Catalog::export_(int index) const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Catalog.export)
  return export__.Get(index);
}
::autoffi::proto::Export* Catalog::mutable_export_(int index) {
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Catalog.export)
  return export__.Mutable(index);
}
::autoffi::proto::Export* Catalog::add_export_() {
  // @@protoc_insertion_point(field_add:autoffi.proto.Catalog.export)
  return export__.Add();
}
::google::protobuf::RepeatedPtrField< ::autoffi::proto::Export >*
Catalog::mutable_export_() {
  // @@protoc_insertion_point(field_mutable_list:autoffi.proto.Catalog.export)
  return &export__;
}
const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Export >&
Catalog::export_() const {
  // @@protoc_insertion_point(field_list:autoffi.proto.Catalog.export)
  return export__;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace autoffi

// @@protoc_insertion_point(global_scope)
