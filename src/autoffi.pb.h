// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: autoffi.proto

#ifndef PROTOBUF_autoffi_2eproto__INCLUDED
#define PROTOBUF_autoffi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace autoffi {
namespace proto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_autoffi_2eproto();
void protobuf_InitDefaults_autoffi_2eproto();
void protobuf_AssignDesc_autoffi_2eproto();
void protobuf_ShutdownFile_autoffi_2eproto();

class Catalog;
class EnumValue;
class Export;
class RecordField;
class Type;
class Value;

enum Type_RecordKind {
  Type_RecordKind_UNDEFINED = 0,
  Type_RecordKind_STRUCT = 1,
  Type_RecordKind_UNION = 2,
  Type_RecordKind_Type_RecordKind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Type_RecordKind_Type_RecordKind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Type_RecordKind_IsValid(int value);
const Type_RecordKind Type_RecordKind_RecordKind_MIN = Type_RecordKind_UNDEFINED;
const Type_RecordKind Type_RecordKind_RecordKind_MAX = Type_RecordKind_UNION;
const int Type_RecordKind_RecordKind_ARRAYSIZE = Type_RecordKind_RecordKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* Type_RecordKind_descriptor();
inline const ::std::string& Type_RecordKind_Name(Type_RecordKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    Type_RecordKind_descriptor(), value);
}
inline bool Type_RecordKind_Parse(
    const ::std::string& name, Type_RecordKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Type_RecordKind>(
    Type_RecordKind_descriptor(), name, value);
}
enum PrimitiveKind {
  Bool = 0,
  Char_U = 1,
  UChar = 2,
  WChar_U = 3,
  Char16 = 4,
  Char32 = 5,
  UShort = 6,
  UInt = 7,
  ULong = 8,
  ULongLong = 9,
  UInt128 = 10,
  Char_S = 11,
  SChar = 12,
  WChar_S = 13,
  Short = 14,
  Int = 15,
  Long = 16,
  LongLong = 17,
  Int128 = 18,
  Half = 19,
  Float = 20,
  Double = 21,
  LongDouble = 22,
  NullPtr = 23,
  Void = 24,
  PrimitiveKind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PrimitiveKind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PrimitiveKind_IsValid(int value);
const PrimitiveKind PrimitiveKind_MIN = Bool;
const PrimitiveKind PrimitiveKind_MAX = Void;
const int PrimitiveKind_ARRAYSIZE = PrimitiveKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* PrimitiveKind_descriptor();
inline const ::std::string& PrimitiveKind_Name(PrimitiveKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    PrimitiveKind_descriptor(), value);
}
inline bool PrimitiveKind_Parse(
    const ::std::string& name, PrimitiveKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PrimitiveKind>(
    PrimitiveKind_descriptor(), name, value);
}
enum TypeKind {
  UNDEFINED = 0,
  PRIMITIVE = 1,
  RECORD = 2,
  ARRAY = 3,
  POINTER = 4,
  FUNCTION = 5,
  ENUM = 6,
  QUALIFIED = 7,
  STRUCT = 8,
  UNION = 9,
  TypeKind_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TypeKind_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TypeKind_IsValid(int value);
const TypeKind TypeKind_MIN = UNDEFINED;
const TypeKind TypeKind_MAX = UNION;
const int TypeKind_ARRAYSIZE = TypeKind_MAX + 1;

const ::google::protobuf::EnumDescriptor* TypeKind_descriptor();
inline const ::std::string& TypeKind_Name(TypeKind value) {
  return ::google::protobuf::internal::NameOfEnum(
    TypeKind_descriptor(), value);
}
inline bool TypeKind_Parse(
    const ::std::string& name, TypeKind* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TypeKind>(
    TypeKind_descriptor(), name, value);
}
// ===================================================================

class RecordField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autoffi.proto.RecordField) */ {
 public:
  RecordField();
  virtual ~RecordField();

  RecordField(const RecordField& from);

  inline RecordField& operator=(const RecordField& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecordField& default_instance();

  static const RecordField* internal_default_instance();

  void UnsafeArenaSwap(RecordField* other);
  void Swap(RecordField* other);

  // implements Message ----------------------------------------------

  inline RecordField* New() const { return New(NULL); }

  RecordField* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecordField& from);
  void MergeFrom(const RecordField& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RecordField* other);
  void UnsafeMergeFrom(const RecordField& from);
  protected:
  explicit RecordField(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional .autoffi.proto.Value defaultValue = 3;
  bool has_defaultvalue() const;
  void clear_defaultvalue();
  static const int kDefaultValueFieldNumber = 3;
  private:
  void _slow_mutable_defaultvalue();
  void _slow_set_allocated_defaultvalue(
      ::google::protobuf::Arena* message_arena, ::autoffi::proto::Value** defaultvalue);
  ::autoffi::proto::Value* _slow_release_defaultvalue();
  public:
  const ::autoffi::proto::Value& defaultvalue() const;
  ::autoffi::proto::Value* mutable_defaultvalue();
  ::autoffi::proto::Value* release_defaultvalue();
  void set_allocated_defaultvalue(::autoffi::proto::Value* defaultvalue);
  ::autoffi::proto::Value* unsafe_arena_release_defaultvalue();
  void unsafe_arena_set_allocated_defaultvalue(
      ::autoffi::proto::Value* defaultvalue);

  // @@protoc_insertion_point(class_scope:autoffi.proto.RecordField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::autoffi::proto::Value* defaultvalue_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_autoffi_2eproto_impl();
  friend void  protobuf_AddDesc_autoffi_2eproto_impl();
  friend void protobuf_AssignDesc_autoffi_2eproto();
  friend void protobuf_ShutdownFile_autoffi_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RecordField> RecordField_default_instance_;

// -------------------------------------------------------------------

class EnumValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autoffi.proto.EnumValue) */ {
 public:
  EnumValue();
  virtual ~EnumValue();

  EnumValue(const EnumValue& from);

  inline EnumValue& operator=(const EnumValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnumValue& default_instance();

  static const EnumValue* internal_default_instance();

  void UnsafeArenaSwap(EnumValue* other);
  void Swap(EnumValue* other);

  // implements Message ----------------------------------------------

  inline EnumValue* New() const { return New(NULL); }

  EnumValue* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnumValue& from);
  void MergeFrom(const EnumValue& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnumValue* other);
  void UnsafeMergeFrom(const EnumValue& from);
  protected:
  explicit EnumValue(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional int32 value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autoffi.proto.EnumValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 value_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_autoffi_2eproto_impl();
  friend void  protobuf_AddDesc_autoffi_2eproto_impl();
  friend void protobuf_AssignDesc_autoffi_2eproto();
  friend void protobuf_ShutdownFile_autoffi_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<EnumValue> EnumValue_default_instance_;

// -------------------------------------------------------------------

class Type : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autoffi.proto.Type) */ {
 public:
  Type();
  virtual ~Type();

  Type(const Type& from);

  inline Type& operator=(const Type& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Type& default_instance();

  static const Type* internal_default_instance();

  void UnsafeArenaSwap(Type* other);
  void Swap(Type* other);

  // implements Message ----------------------------------------------

  inline Type* New() const { return New(NULL); }

  Type* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Type& from);
  void MergeFrom(const Type& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Type* other);
  void UnsafeMergeFrom(const Type& from);
  protected:
  explicit Type(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Type_RecordKind RecordKind;
  static const RecordKind UNDEFINED =
    Type_RecordKind_UNDEFINED;
  static const RecordKind STRUCT =
    Type_RecordKind_STRUCT;
  static const RecordKind UNION =
    Type_RecordKind_UNION;
  static inline bool RecordKind_IsValid(int value) {
    return Type_RecordKind_IsValid(value);
  }
  static const RecordKind RecordKind_MIN =
    Type_RecordKind_RecordKind_MIN;
  static const RecordKind RecordKind_MAX =
    Type_RecordKind_RecordKind_MAX;
  static const int RecordKind_ARRAYSIZE =
    Type_RecordKind_RecordKind_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  RecordKind_descriptor() {
    return Type_RecordKind_descriptor();
  }
  static inline const ::std::string& RecordKind_Name(RecordKind value) {
    return Type_RecordKind_Name(value);
  }
  static inline bool RecordKind_Parse(const ::std::string& name,
      RecordKind* value) {
    return Type_RecordKind_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional .autoffi.proto.TypeKind kind = 2;
  void clear_kind();
  static const int kKindFieldNumber = 2;
  ::autoffi::proto::TypeKind kind() const;
  void set_kind(::autoffi::proto::TypeKind value);

  // optional int32 referencedType = 5;
  void clear_referencedtype();
  static const int kReferencedTypeFieldNumber = 5;
  ::google::protobuf::int32 referencedtype() const;
  void set_referencedtype(::google::protobuf::int32 value);

  // optional bool isBlockPointer = 6;
  void clear_isblockpointer();
  static const int kIsBlockPointerFieldNumber = 6;
  bool isblockpointer() const;
  void set_isblockpointer(bool value);

  // optional int32 elementType = 10;
  void clear_elementtype();
  static const int kElementTypeFieldNumber = 10;
  ::google::protobuf::int32 elementtype() const;
  void set_elementtype(::google::protobuf::int32 value);

  // optional int32 size = 11;
  void clear_size();
  static const int kSizeFieldNumber = 11;
  ::google::protobuf::int32 size() const;
  void set_size(::google::protobuf::int32 value);

  // optional .autoffi.proto.PrimitiveKind primitiveKind = 15;
  void clear_primitivekind();
  static const int kPrimitiveKindFieldNumber = 15;
  ::autoffi::proto::PrimitiveKind primitivekind() const;
  void set_primitivekind(::autoffi::proto::PrimitiveKind value);

  // optional .autoffi.proto.Type.RecordKind recordKind = 20;
  void clear_recordkind();
  static const int kRecordKindFieldNumber = 20;
  ::autoffi::proto::Type_RecordKind recordkind() const;
  void set_recordkind(::autoffi::proto::Type_RecordKind value);

  // repeated .autoffi.proto.RecordField field = 21;
  int field_size() const;
  void clear_field();
  static const int kFieldFieldNumber = 21;
  const ::autoffi::proto::RecordField& field(int index) const;
  ::autoffi::proto::RecordField* mutable_field(int index);
  ::autoffi::proto::RecordField* add_field();
  ::google::protobuf::RepeatedPtrField< ::autoffi::proto::RecordField >*
      mutable_field();
  const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::RecordField >&
      field() const;

  // optional int32 returnType = 25;
  void clear_returntype();
  static const int kReturnTypeFieldNumber = 25;
  ::google::protobuf::int32 returntype() const;
  void set_returntype(::google::protobuf::int32 value);

  // repeated int32 paramType = 26;
  int paramtype_size() const;
  void clear_paramtype();
  static const int kParamTypeFieldNumber = 26;
  ::google::protobuf::int32 paramtype(int index) const;
  void set_paramtype(int index, ::google::protobuf::int32 value);
  void add_paramtype(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      paramtype() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_paramtype();

  // repeated .autoffi.proto.EnumValue value = 30;
  int value_size() const;
  void clear_value();
  static const int kValueFieldNumber = 30;
  const ::autoffi::proto::EnumValue& value(int index) const;
  ::autoffi::proto::EnumValue* mutable_value(int index);
  ::autoffi::proto::EnumValue* add_value();
  ::google::protobuf::RepeatedPtrField< ::autoffi::proto::EnumValue >*
      mutable_value();
  const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::EnumValue >&
      value() const;

  // optional bool isConst = 50;
  void clear_isconst();
  static const int kIsConstFieldNumber = 50;
  bool isconst() const;
  void set_isconst(bool value);

  // optional bool isVolatile = 51;
  void clear_isvolatile();
  static const int kIsVolatileFieldNumber = 51;
  bool isvolatile() const;
  void set_isvolatile(bool value);

  // optional int32 underlyingType = 49;
  void clear_underlyingtype();
  static const int kUnderlyingTypeFieldNumber = 49;
  ::google::protobuf::int32 underlyingtype() const;
  void set_underlyingtype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:autoffi.proto.Type)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::autoffi::proto::RecordField > field_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > paramtype_;
  mutable int _paramtype_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::autoffi::proto::EnumValue > value_;
  ::google::protobuf::int32 id_;
  int kind_;
  ::google::protobuf::int32 referencedtype_;
  ::google::protobuf::int32 elementtype_;
  ::google::protobuf::int32 size_;
  int primitivekind_;
  int recordkind_;
  ::google::protobuf::int32 returntype_;
  bool isblockpointer_;
  bool isconst_;
  bool isvolatile_;
  ::google::protobuf::int32 underlyingtype_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_autoffi_2eproto_impl();
  friend void  protobuf_AddDesc_autoffi_2eproto_impl();
  friend void protobuf_AssignDesc_autoffi_2eproto();
  friend void protobuf_ShutdownFile_autoffi_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Type> Type_default_instance_;

// -------------------------------------------------------------------

class Value : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autoffi.proto.Value) */ {
 public:
  Value();
  virtual ~Value();

  Value(const Value& from);

  inline Value& operator=(const Value& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Value& default_instance();

  static const Value* internal_default_instance();

  void UnsafeArenaSwap(Value* other);
  void Swap(Value* other);

  // implements Message ----------------------------------------------

  inline Value* New() const { return New(NULL); }

  Value* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Value& from);
  void MergeFrom(const Value& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Value* other);
  void UnsafeMergeFrom(const Value& from);
  protected:
  explicit Value(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 typeId = 1;
  void clear_typeid_();
  static const int kTypeIdFieldNumber = 1;
  ::google::protobuf::int32 typeid_() const;
  void set_typeid_(::google::protobuf::int32 value);

  // optional string mangledName = 5;
  void clear_mangledname();
  static const int kMangledNameFieldNumber = 5;
  const ::std::string& mangledname() const;
  void set_mangledname(const ::std::string& value);
  void set_mangledname(const char* value);
  void set_mangledname(const char* value, size_t size);
  ::std::string* mutable_mangledname();
  ::std::string* release_mangledname();
  void set_allocated_mangledname(::std::string* mangledname);
  ::std::string* unsafe_arena_release_mangledname();
  void unsafe_arena_set_allocated_mangledname(
      ::std::string* mangledname);

  // optional bytes value = 10;
  void clear_value();
  static const int kValueFieldNumber = 10;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);
  ::std::string* unsafe_arena_release_value();
  void unsafe_arena_set_allocated_value(
      ::std::string* value);

  // @@protoc_insertion_point(class_scope:autoffi.proto.Value)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr mangledname_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::int32 typeid__;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_autoffi_2eproto_impl();
  friend void  protobuf_AddDesc_autoffi_2eproto_impl();
  friend void protobuf_AssignDesc_autoffi_2eproto();
  friend void protobuf_ShutdownFile_autoffi_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Value> Value_default_instance_;

// -------------------------------------------------------------------

class Export : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autoffi.proto.Export) */ {
 public:
  Export();
  virtual ~Export();

  Export(const Export& from);

  inline Export& operator=(const Export& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Export& default_instance();

  static const Export* internal_default_instance();

  void UnsafeArenaSwap(Export* other);
  void Swap(Export* other);

  // implements Message ----------------------------------------------

  inline Export* New() const { return New(NULL); }

  Export* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Export& from);
  void MergeFrom(const Export& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Export* other);
  void UnsafeMergeFrom(const Export& from);
  protected:
  explicit Export(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  ::std::string* unsafe_arena_release_name();
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // optional int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // optional .autoffi.proto.Value value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  private:
  void _slow_mutable_value();
  void _slow_set_allocated_value(
      ::google::protobuf::Arena* message_arena, ::autoffi::proto::Value** value);
  ::autoffi::proto::Value* _slow_release_value();
  public:
  const ::autoffi::proto::Value& value() const;
  ::autoffi::proto::Value* mutable_value();
  ::autoffi::proto::Value* release_value();
  void set_allocated_value(::autoffi::proto::Value* value);
  ::autoffi::proto::Value* unsafe_arena_release_value();
  void unsafe_arena_set_allocated_value(
      ::autoffi::proto::Value* value);

  // @@protoc_insertion_point(class_scope:autoffi.proto.Export)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::autoffi::proto::Value* value_;
  ::google::protobuf::int32 type_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_autoffi_2eproto_impl();
  friend void  protobuf_AddDesc_autoffi_2eproto_impl();
  friend void protobuf_AssignDesc_autoffi_2eproto();
  friend void protobuf_ShutdownFile_autoffi_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Export> Export_default_instance_;

// -------------------------------------------------------------------

class Catalog : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:autoffi.proto.Catalog) */ {
 public:
  Catalog();
  virtual ~Catalog();

  Catalog(const Catalog& from);

  inline Catalog& operator=(const Catalog& from) {
    CopyFrom(from);
    return *this;
  }

  inline ::google::protobuf::Arena* GetArena() const { return GetArenaNoVirtual(); }
  inline void* GetMaybeArenaPointer() const {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Catalog& default_instance();

  static const Catalog* internal_default_instance();

  void UnsafeArenaSwap(Catalog* other);
  void Swap(Catalog* other);

  // implements Message ----------------------------------------------

  inline Catalog* New() const { return New(NULL); }

  Catalog* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Catalog& from);
  void MergeFrom(const Catalog& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Catalog* other);
  void UnsafeMergeFrom(const Catalog& from);
  protected:
  explicit Catalog(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .autoffi.proto.Type type = 1;
  int type_size() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  const ::autoffi::proto::Type& type(int index) const;
  ::autoffi::proto::Type* mutable_type(int index);
  ::autoffi::proto::Type* add_type();
  ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Type >*
      mutable_type();
  const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Type >&
      type() const;

  // repeated .autoffi.proto.Export export = 2;
  int export__size() const;
  void clear_export_();
  static const int kExportFieldNumber = 2;
  const ::autoffi::proto::Export& export_(int index) const;
  ::autoffi::proto::Export* mutable_export_(int index);
  ::autoffi::proto::Export* add_export_();
  ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Export >*
      mutable_export_();
  const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Export >&
      export_() const;

  // @@protoc_insertion_point(class_scope:autoffi.proto.Catalog)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  friend class ::google::protobuf::Arena;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Type > type_;
  ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Export > export__;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_autoffi_2eproto_impl();
  friend void  protobuf_AddDesc_autoffi_2eproto_impl();
  friend void protobuf_AssignDesc_autoffi_2eproto();
  friend void protobuf_ShutdownFile_autoffi_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Catalog> Catalog_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// RecordField

// optional string name = 1;
inline void RecordField::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& RecordField::name() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.RecordField.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecordField::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:autoffi.proto.RecordField.name)
}
inline void RecordField::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:autoffi.proto.RecordField.name)
}
inline void RecordField::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:autoffi.proto.RecordField.name)
}
inline ::std::string* RecordField::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:autoffi.proto.RecordField.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RecordField::release_name() {
  // @@protoc_insertion_point(field_release:autoffi.proto.RecordField.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* RecordField::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.RecordField.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void RecordField::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.RecordField.name)
}
inline void RecordField::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.RecordField.name)
}

// optional int32 type = 2;
inline void RecordField::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 RecordField::type() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.RecordField.type)
  return type_;
}
inline void RecordField::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.RecordField.type)
}

// optional .autoffi.proto.Value defaultValue = 3;
inline bool RecordField::has_defaultvalue() const {
  return this != internal_default_instance() && defaultvalue_ != NULL;
}
inline void RecordField::clear_defaultvalue() {
  if (GetArenaNoVirtual() == NULL && defaultvalue_ != NULL) delete defaultvalue_;
  defaultvalue_ = NULL;
}
inline const ::autoffi::proto::Value& RecordField::defaultvalue() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.RecordField.defaultValue)
  return defaultvalue_ != NULL ? *defaultvalue_
                         : *::autoffi::proto::Value::internal_default_instance();
}
inline ::autoffi::proto::Value* RecordField::mutable_defaultvalue() {
  
  if (defaultvalue_ == NULL) {
    _slow_mutable_defaultvalue();
  }
  // @@protoc_insertion_point(field_mutable:autoffi.proto.RecordField.defaultValue)
  return defaultvalue_;
}
inline ::autoffi::proto::Value* RecordField::release_defaultvalue() {
  // @@protoc_insertion_point(field_release:autoffi.proto.RecordField.defaultValue)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_defaultvalue();
  } else {
    ::autoffi::proto::Value* temp = defaultvalue_;
    defaultvalue_ = NULL;
    return temp;
  }
}
inline  void RecordField::set_allocated_defaultvalue(::autoffi::proto::Value* defaultvalue) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete defaultvalue_;
  }
  if (defaultvalue != NULL) {
    _slow_set_allocated_defaultvalue(message_arena, &defaultvalue);
  }
  defaultvalue_ = defaultvalue;
  if (defaultvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.RecordField.defaultValue)
}

inline const RecordField* RecordField::internal_default_instance() {
  return &RecordField_default_instance_.get();
}
// -------------------------------------------------------------------

// EnumValue

// optional string name = 1;
inline void EnumValue::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& EnumValue::name() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.EnumValue.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnumValue::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:autoffi.proto.EnumValue.name)
}
inline void EnumValue::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:autoffi.proto.EnumValue.name)
}
inline void EnumValue::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:autoffi.proto.EnumValue.name)
}
inline ::std::string* EnumValue::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:autoffi.proto.EnumValue.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EnumValue::release_name() {
  // @@protoc_insertion_point(field_release:autoffi.proto.EnumValue.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* EnumValue::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.EnumValue.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void EnumValue::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.EnumValue.name)
}
inline void EnumValue::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.EnumValue.name)
}

// optional int32 value = 2;
inline void EnumValue::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 EnumValue::value() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.EnumValue.value)
  return value_;
}
inline void EnumValue::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.EnumValue.value)
}

inline const EnumValue* EnumValue::internal_default_instance() {
  return &EnumValue_default_instance_.get();
}
// -------------------------------------------------------------------

// Type

// optional int32 id = 1;
inline void Type::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Type::id() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.id)
  return id_;
}
inline void Type::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.id)
}

// optional .autoffi.proto.TypeKind kind = 2;
inline void Type::clear_kind() {
  kind_ = 0;
}
inline ::autoffi::proto::TypeKind Type::kind() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.kind)
  return static_cast< ::autoffi::proto::TypeKind >(kind_);
}
inline void Type::set_kind(::autoffi::proto::TypeKind value) {
  
  kind_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.kind)
}

// optional int32 referencedType = 5;
inline void Type::clear_referencedtype() {
  referencedtype_ = 0;
}
inline ::google::protobuf::int32 Type::referencedtype() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.referencedType)
  return referencedtype_;
}
inline void Type::set_referencedtype(::google::protobuf::int32 value) {
  
  referencedtype_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.referencedType)
}

// optional bool isBlockPointer = 6;
inline void Type::clear_isblockpointer() {
  isblockpointer_ = false;
}
inline bool Type::isblockpointer() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.isBlockPointer)
  return isblockpointer_;
}
inline void Type::set_isblockpointer(bool value) {
  
  isblockpointer_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.isBlockPointer)
}

// optional int32 elementType = 10;
inline void Type::clear_elementtype() {
  elementtype_ = 0;
}
inline ::google::protobuf::int32 Type::elementtype() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.elementType)
  return elementtype_;
}
inline void Type::set_elementtype(::google::protobuf::int32 value) {
  
  elementtype_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.elementType)
}

// optional int32 size = 11;
inline void Type::clear_size() {
  size_ = 0;
}
inline ::google::protobuf::int32 Type::size() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.size)
  return size_;
}
inline void Type::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.size)
}

// optional .autoffi.proto.PrimitiveKind primitiveKind = 15;
inline void Type::clear_primitivekind() {
  primitivekind_ = 0;
}
inline ::autoffi::proto::PrimitiveKind Type::primitivekind() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.primitiveKind)
  return static_cast< ::autoffi::proto::PrimitiveKind >(primitivekind_);
}
inline void Type::set_primitivekind(::autoffi::proto::PrimitiveKind value) {
  
  primitivekind_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.primitiveKind)
}

// optional .autoffi.proto.Type.RecordKind recordKind = 20;
inline void Type::clear_recordkind() {
  recordkind_ = 0;
}
inline ::autoffi::proto::Type_RecordKind Type::recordkind() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.recordKind)
  return static_cast< ::autoffi::proto::Type_RecordKind >(recordkind_);
}
inline void Type::set_recordkind(::autoffi::proto::Type_RecordKind value) {
  
  recordkind_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.recordKind)
}

// repeated .autoffi.proto.RecordField field = 21;
inline int Type::field_size() const {
  return field_.size();
}
inline void Type::clear_field() {
  field_.Clear();
}
inline const ::autoffi::proto::RecordField& Type::field(int index) const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.field)
  return field_.Get(index);
}
inline ::autoffi::proto::RecordField* Type::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Type.field)
  return field_.Mutable(index);
}
inline ::autoffi::proto::RecordField* Type::add_field() {
  // @@protoc_insertion_point(field_add:autoffi.proto.Type.field)
  return field_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autoffi::proto::RecordField >*
Type::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:autoffi.proto.Type.field)
  return &field_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::RecordField >&
Type::field() const {
  // @@protoc_insertion_point(field_list:autoffi.proto.Type.field)
  return field_;
}

// optional int32 returnType = 25;
inline void Type::clear_returntype() {
  returntype_ = 0;
}
inline ::google::protobuf::int32 Type::returntype() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.returnType)
  return returntype_;
}
inline void Type::set_returntype(::google::protobuf::int32 value) {
  
  returntype_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.returnType)
}

// repeated int32 paramType = 26;
inline int Type::paramtype_size() const {
  return paramtype_.size();
}
inline void Type::clear_paramtype() {
  paramtype_.Clear();
}
inline ::google::protobuf::int32 Type::paramtype(int index) const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.paramType)
  return paramtype_.Get(index);
}
inline void Type::set_paramtype(int index, ::google::protobuf::int32 value) {
  paramtype_.Set(index, value);
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.paramType)
}
inline void Type::add_paramtype(::google::protobuf::int32 value) {
  paramtype_.Add(value);
  // @@protoc_insertion_point(field_add:autoffi.proto.Type.paramType)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Type::paramtype() const {
  // @@protoc_insertion_point(field_list:autoffi.proto.Type.paramType)
  return paramtype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Type::mutable_paramtype() {
  // @@protoc_insertion_point(field_mutable_list:autoffi.proto.Type.paramType)
  return &paramtype_;
}

// repeated .autoffi.proto.EnumValue value = 30;
inline int Type::value_size() const {
  return value_.size();
}
inline void Type::clear_value() {
  value_.Clear();
}
inline const ::autoffi::proto::EnumValue& Type::value(int index) const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.value)
  return value_.Get(index);
}
inline ::autoffi::proto::EnumValue* Type::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Type.value)
  return value_.Mutable(index);
}
inline ::autoffi::proto::EnumValue* Type::add_value() {
  // @@protoc_insertion_point(field_add:autoffi.proto.Type.value)
  return value_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autoffi::proto::EnumValue >*
Type::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:autoffi.proto.Type.value)
  return &value_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::EnumValue >&
Type::value() const {
  // @@protoc_insertion_point(field_list:autoffi.proto.Type.value)
  return value_;
}

// optional bool isConst = 50;
inline void Type::clear_isconst() {
  isconst_ = false;
}
inline bool Type::isconst() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.isConst)
  return isconst_;
}
inline void Type::set_isconst(bool value) {
  
  isconst_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.isConst)
}

// optional bool isVolatile = 51;
inline void Type::clear_isvolatile() {
  isvolatile_ = false;
}
inline bool Type::isvolatile() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.isVolatile)
  return isvolatile_;
}
inline void Type::set_isvolatile(bool value) {
  
  isvolatile_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.isVolatile)
}

// optional int32 underlyingType = 49;
inline void Type::clear_underlyingtype() {
  underlyingtype_ = 0;
}
inline ::google::protobuf::int32 Type::underlyingtype() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Type.underlyingType)
  return underlyingtype_;
}
inline void Type::set_underlyingtype(::google::protobuf::int32 value) {
  
  underlyingtype_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Type.underlyingType)
}

inline const Type* Type::internal_default_instance() {
  return &Type_default_instance_.get();
}
// -------------------------------------------------------------------

// Value

// optional int32 typeId = 1;
inline void Value::clear_typeid_() {
  typeid__ = 0;
}
inline ::google::protobuf::int32 Value::typeid_() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Value.typeId)
  return typeid__;
}
inline void Value::set_typeid_(::google::protobuf::int32 value) {
  
  typeid__ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Value.typeId)
}

// optional string mangledName = 5;
inline void Value::clear_mangledname() {
  mangledname_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Value::mangledname() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Value.mangledName)
  return mangledname_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_mangledname(const ::std::string& value) {
  
  mangledname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:autoffi.proto.Value.mangledName)
}
inline void Value::set_mangledname(const char* value) {
  
  mangledname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:autoffi.proto.Value.mangledName)
}
inline void Value::set_mangledname(const char* value,
    size_t size) {
  
  mangledname_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:autoffi.proto.Value.mangledName)
}
inline ::std::string* Value::mutable_mangledname() {
  
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Value.mangledName)
  return mangledname_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Value::release_mangledname() {
  // @@protoc_insertion_point(field_release:autoffi.proto.Value.mangledName)
  
  return mangledname_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Value::unsafe_arena_release_mangledname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.Value.mangledName)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return mangledname_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Value::set_allocated_mangledname(::std::string* mangledname) {
  if (mangledname != NULL) {
    
  } else {
    
  }
  mangledname_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mangledname,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.Value.mangledName)
}
inline void Value::unsafe_arena_set_allocated_mangledname(
    ::std::string* mangledname) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (mangledname != NULL) {
    
  } else {
    
  }
  mangledname_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      mangledname, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.Value.mangledName)
}

// optional bytes value = 10;
inline void Value::clear_value() {
  value_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Value::value() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Value.value)
  return value_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Value::set_value(const ::std::string& value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:autoffi.proto.Value.value)
}
inline void Value::set_value(const char* value) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:autoffi.proto.Value.value)
}
inline void Value::set_value(const void* value,
    size_t size) {
  
  value_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:autoffi.proto.Value.value)
}
inline ::std::string* Value::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Value.value)
  return value_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Value::release_value() {
  // @@protoc_insertion_point(field_release:autoffi.proto.Value.value)
  
  return value_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Value::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.Value.value)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return value_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Value::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.Value.value)
}
inline void Value::unsafe_arena_set_allocated_value(
    ::std::string* value) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (value != NULL) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.Value.value)
}

inline const Value* Value::internal_default_instance() {
  return &Value_default_instance_.get();
}
// -------------------------------------------------------------------

// Export

// optional string name = 1;
inline void Export::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Export::name() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Export.name)
  return name_.Get(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Export::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:autoffi.proto.Export.name)
}
inline void Export::set_name(const char* value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:autoffi.proto.Export.name)
}
inline void Export::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:autoffi.proto.Export.name)
}
inline ::std::string* Export::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Export.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Export::release_name() {
  // @@protoc_insertion_point(field_release:autoffi.proto.Export.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Export::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:autoffi.proto.Export.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Export::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.Export.name)
}
inline void Export::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:autoffi.proto.Export.name)
}

// optional int32 type = 2;
inline void Export::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Export::type() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Export.type)
  return type_;
}
inline void Export::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:autoffi.proto.Export.type)
}

// optional .autoffi.proto.Value value = 3;
inline bool Export::has_value() const {
  return this != internal_default_instance() && value_ != NULL;
}
inline void Export::clear_value() {
  if (GetArenaNoVirtual() == NULL && value_ != NULL) delete value_;
  value_ = NULL;
}
inline const ::autoffi::proto::Value& Export::value() const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Export.value)
  return value_ != NULL ? *value_
                         : *::autoffi::proto::Value::internal_default_instance();
}
inline ::autoffi::proto::Value* Export::mutable_value() {
  
  if (value_ == NULL) {
    _slow_mutable_value();
  }
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Export.value)
  return value_;
}
inline ::autoffi::proto::Value* Export::release_value() {
  // @@protoc_insertion_point(field_release:autoffi.proto.Export.value)
  
  if (GetArenaNoVirtual() != NULL) {
    return _slow_release_value();
  } else {
    ::autoffi::proto::Value* temp = value_;
    value_ = NULL;
    return temp;
  }
}
inline  void Export::set_allocated_value(::autoffi::proto::Value* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete value_;
  }
  if (value != NULL) {
    _slow_set_allocated_value(message_arena, &value);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:autoffi.proto.Export.value)
}

inline const Export* Export::internal_default_instance() {
  return &Export_default_instance_.get();
}
// -------------------------------------------------------------------

// Catalog

// repeated .autoffi.proto.Type type = 1;
inline int Catalog::type_size() const {
  return type_.size();
}
inline void Catalog::clear_type() {
  type_.Clear();
}
inline const ::autoffi::proto::Type& Catalog::type(int index) const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Catalog.type)
  return type_.Get(index);
}
inline ::autoffi::proto::Type* Catalog::mutable_type(int index) {
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Catalog.type)
  return type_.Mutable(index);
}
inline ::autoffi::proto::Type* Catalog::add_type() {
  // @@protoc_insertion_point(field_add:autoffi.proto.Catalog.type)
  return type_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Type >*
Catalog::mutable_type() {
  // @@protoc_insertion_point(field_mutable_list:autoffi.proto.Catalog.type)
  return &type_;
}
inline const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Type >&
Catalog::type() const {
  // @@protoc_insertion_point(field_list:autoffi.proto.Catalog.type)
  return type_;
}

// repeated .autoffi.proto.Export export = 2;
inline int Catalog::export__size() const {
  return export__.size();
}
inline void Catalog::clear_export_() {
  export__.Clear();
}
inline const ::autoffi::proto::Export& Catalog::export_(int index) const {
  // @@protoc_insertion_point(field_get:autoffi.proto.Catalog.export)
  return export__.Get(index);
}
inline ::autoffi::proto::Export* Catalog::mutable_export_(int index) {
  // @@protoc_insertion_point(field_mutable:autoffi.proto.Catalog.export)
  return export__.Mutable(index);
}
inline ::autoffi::proto::Export* Catalog::add_export_() {
  // @@protoc_insertion_point(field_add:autoffi.proto.Catalog.export)
  return export__.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Export >*
Catalog::mutable_export_() {
  // @@protoc_insertion_point(field_mutable_list:autoffi.proto.Catalog.export)
  return &export__;
}
inline const ::google::protobuf::RepeatedPtrField< ::autoffi::proto::Export >&
Catalog::export_() const {
  // @@protoc_insertion_point(field_list:autoffi.proto.Catalog.export)
  return export__;
}

inline const Catalog* Catalog::internal_default_instance() {
  return &Catalog_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace autoffi

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::autoffi::proto::Type_RecordKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoffi::proto::Type_RecordKind>() {
  return ::autoffi::proto::Type_RecordKind_descriptor();
}
template <> struct is_proto_enum< ::autoffi::proto::PrimitiveKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoffi::proto::PrimitiveKind>() {
  return ::autoffi::proto::PrimitiveKind_descriptor();
}
template <> struct is_proto_enum< ::autoffi::proto::TypeKind> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::autoffi::proto::TypeKind>() {
  return ::autoffi::proto::TypeKind_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_autoffi_2eproto__INCLUDED
